---
title: Augmentation / Replacement
date: 2025-05-01 13:40:49
layout: post
lang: en
tags: [ai, software, programming]
draft: true
---
#+OPTIONS: toc:nil num:nil
#+LANGUAGE: en

I settled on a convenient way to integrate LLMs to my workflow and I've been using them increasingly for my job, for personal projects, and for writing. It fulfills several purposes for me:

- a sophisticated search engine with the most flexible of query languages and arbitrarily customizable output format[fn:4];
- the ultimate rubber duck, one that can spit back statistically generated opinions;
- a fast, knowledgeable, overeager, and sloppy junior programmer[fn:5].

I unlocked some of that extra ambition Simon Willison keeps talking about: that of tackling projects that I would otherwise skip not because I couldn't do them but because they wouldn't be worth the effort[fn:2]. But beyond these concrete use cases, I see much potential in its flexibility[fn:3]: I can see myself building more sophisticated workflows and personal applications; I can see the technology getting good enough that I can trust it more, and rely less on googling and source checking; I can see myself using voice instructions for pair programming, letting it run commands in the terminal; I can see myself building local knowledge bases with all my code and my writings and any ephemeral thought that I can capture in my minibuffer, a second brain to look at from all angles.

I don't tend to get excited about technology in and of itself, and LLMs aren't the exception, but if I filter all the noise---which is loud---and try to be objective, I can accept that even in their present flawed incarnation they may well be the most powerful human augmentation tool in the history of computing[fn:1].

#+BEGIN_CENTER
\lowast{}
#+END_CENTER

But for all this current and future power, I'm convinced that generative AI will continue to be a mediocre human replacement when it comes to intellectual and creative work. It's not that I don't think capitalists won't attempt to replace knowledge workers---or that they won't succeed at it. It's just that when they do, the proportion of bullshit jobs will increase, and the average quality of their work will get worse. That's not a future I look forward to and not something I can call progress.

<fungible, a commodity,

#+BEGIN_CENTER
\lowast{}
#+END_CENTER

I see two misconceptions in the drive to commoditize software production

1. non technical folks tend to think that software engineering is limited to writing working code
    software engineering is writing code, so an engineer is a slow and expensive alternative to an LLM

2. technical llm enthusiasts seem to act as if writing code was the slowest or most complex part of their jobs
   if we delegate code writing to LLMs, we'll free up time and increase productivity.

#+BEGIN_CENTER
\lowast{}
#+END_CENTER

<but even if llms were cheap and didn't hallucinate and could consistently produce good code, and even if we ignored that there's a lot more to development than just writing the code,
<instead: but less assume that
there would still be serious trade-offs in trying to delegate all the coding to AIs.

even if
3. There aren't any downsides to letting LLMs doing the work
   - design and economic incentive: producing more output
   - code is liability, not an asset.
   - we're better off removing code or preventing it from being written, which is the exact opposite of the llms modus operandi
   - complexity reduction
   - ironies of automation
   - knowledge building

*** Notes

[fn:1] <If anything, I'm more impressed by the technology evolution that led to millions of humans producing the digital information necessary to train the models, than by the models or their underlying technology.

[fn:2] <I recently embarked on a big Emacs config overhaul despite still being terrible at emacs lisp and with superficial knowledge of emacs internals

[fn:3] I believe it helps that I use Emacs as my "center of computing operations": since I already pay a lot of attention to my coding and writing habits, I can be deliberate and precise on how to improve them with such a malleable tool.

[fn:4] ...but that operates on stale data and is somewhat inaccurate.

[fn:5] ...that is also a lying psychopath.
