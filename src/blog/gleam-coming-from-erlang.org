---
title: Gleam, coming from Erlang
date: 2025-02-21 08:28:59
layout: post
lang: en
tags: [programming, web, projects, ideas]
draft: true
refs: [zenoferlang]
---
#+OPTIONS: toc:nil num:nil
#+LANGUAGE: en

I made some time to try [[https://gleam.run/][Gleam]], the type safe language that runs on the Erlang virtual machine.
For a couple of weeks, I used it to build a little [[https://github.com/facundoolano/news.olano.dev/][open source]] feed aggregator, that's now [[https://news.olano.dev/][live]].
These are my notes.

** why I'm interested in Gleam

I spent most of my career working with dynamic languages: Python, JavaScript, Clojure, finally Erlang. I don't claim to be an expert but the Erlang VM is the piece of technology I've became most intimately familiar with. There is no way around it, I think: if you're running Erlang in production sooner or later you'll be thinking in terms of processes, scheduling, failure modules, resource utilisation[fn:8].

After Erlang, I dabbled in Rust, both professionally and on [[deconstructing-the-role-playing-videogame][personal projects]], and I was very impressed by its type system, its error handling, the developer experience it enabled. The thing is: Rust comes with all the systems programming overhead, which in my opinion is not a good bargain if you are not, you know, programming systems. Alas, I'm too old to pick up my own garbage. And, coming from Erlang, Rust's async concurrency (like JavaScript's, like Python's) just makes me very sad inside.

So you can imagine why Gleam looks interesting to me:

- I would like a Rust minus the memory management and with a gentler concurrency model;
- I would like a BEAM language without Erlang's rough edges and with the goodies of a modern type system[fn:1].

I'm not claiming Gleam is one of those things, but it seems close enough to spike my interest.

** the project

After happily running [[https://olano.dev/blog/reclaiming-the-web-with-a-personal-reader/][my personal feed reader]] for over a year, several spin-off projects have been coming to mind: turning my list of feeds into a blog roll, my list of favorites into a link blog, making a public version of my feed, etc.

The single remarkable feature of my reader is that I don't sort posts chronologically but by "reverse frequency". If I follow a news site that publishes twice an hour and an essayist that publishes every two months, I want the essayist at the top of my feed if they published yesterday, even if there are 30 more recent news posts[fn:2]. To get this effect I distribute the feeds in frequency buckets and sort by reverse frequency first, publish date later. This is what the bucket calculation looks like in Gleam[fn:3]:

#+begin_src gleam
/// Calculate the frequency bucket of the feed,
/// by checking the average post frequency from the current
/// entry list. The higher rate the higher bucket.
fn calc_bucket(entries: List(FeedEntry)) -> Int {
  let by_date =
    list.sort(entries, by: fn(e1, e2) {
      birl.compare(e1.published, e2.published)
    })

  case list.first(by_date), list.last(by_date) {
    Ok(first), Ok(last) -> {
      let delta = birl.difference(last.published, first.published)
      let days = int.max(1, duration.blur_to(delta, duration.Day))
      let posts_per_day =
        int.to_float(list.length(entries)) /. int.to_float(days)

      case posts_per_day {
        // once a month or less
        n if n <=. 1.0 /. 30.0 -> 0
        // once week or less
        n if n <=. 1.0 /. 7.0 -> 1
        // once a day or less
        n if n <=. 1.0 /. 1.0 -> 2
        // 5 times a day or less
        n if n <=. 1.0 /. 5.0 -> 3
        // 20 times a day or less
        n if n <=. 1.0 /. 20.0 -> 4
        // more
        _ -> 5
      }
    }
    _, _ -> 0
  }
}
#+end_src

The minimal feed reader spin-off I could think of was then to:

  1. dump my followed feeds into a file,
  2. write a program that periodically pulls entries from each feed on the list,
  3. sorts them in reverse frequency,
  4. serves them as a list of links.

** the design

The approach I took to design the app was: try to do what you would do in Erlang and see if that fits in Gleam. I came up with this:

- A set of [[https://www.erlang.org/docs/24/man/gen_server][gen_servers]], one per feed, that would periodically request the feed url, parse the entries and store them in the process state.
- Another gen_server that would periodically query each feed poller process for its most recent list of entries, sort them and dump them into a globally accessible [[https://www.erlang.org/docs/24/man/ets][ETS table]]. (That way, no process becomes a source of contention between clients trying to read the data, and the rebuilding of the table doesn't delay its reading).
- A minimal web server that would just query the table and build an HTML list of the current entries.

I wouldn't bother with persisting the entries to a data store, although I would keep a file cache of XML  responses to rebuild the state on app restarts without spamming the source sites.

The final result was very close to this initial design, with the exception that I opted for a [[https://www.erlang.org/doc/apps/erts/persistent_term.html][persistent_term]] instead of an ETS table, since I didn't want to get entries by key but read the full list on every request.

** env setup

As a digression, I want to echo something I [[https://batsov.com/articles/2024/02/27/m-x-reloaded-the-second-golden-age-of-emacs/][read recently]]: this is a great time to be an Emacs user. Thanks to LSP, tree-sitter and [[https://github.com/radian-software/apheleia][apheleia]], I get a very consistent UX for new languages practically out of the box, something that a couple of years ago required days of tweaking to get right[fn:4].

I don't know if it's a particular inclination of the language designer or that's just how things are done today, but I was surprised to see how much emphasis is put in improving the developer experience and, specifically, adding features to the Language Server implementation. During my first week of development, I constantly missed the ability to ~lsp-rename~ I have in other languages; during my second week, [[https://gleam.run/news/gleam-gets-rename-variable/][a new Gleam version]] came out adding that very feature!

** learning
- I learned most of what I needed to know in 30 minuntes, through the [[https://tour.gleam.run/][official tour]]. I had the advantage of being already familiar with Rust and Erlang, but I would say that the fact that everything can be covered so succinctly speaks of the effort that was put into keeping the language small and simple.
- For the standard libraries and external dependencies, their respective hex docs pages are the way to go.
- To pick up on conceptual discussions, ask questions and learn what's idiomatic, I found that (unfortunately for me) the discord channel is more effective than searching GitHub.

** the language

- The language specification is already stable, having reached 1.0 about [[https://gleam.run/news/gleam-version-1/][a year ago]].
- The syntax pretty much feels like a functional subset of Rust, with Elixir-like pipes (~|>~) and a standard library adjusted to take advantage of them.
- One of the things I pay more attention to in a programming language, and one that can be a good indicator of its "vibe", is how it deals with imports and namespaces. I think Gleam gets this /exactly/ right[fn:5], with namespaces matching modules matching filenames, a single directive for imports, and qualified imports as [[https://tour.gleam.run/basics/modules/][the easy default]]:

  #+begin_src Gleam
import gleam/io
import gleam/string as text

pub fn main() {
    // Use a function from the `gleam/io` module
    io.println("Hello, Mike!")

    // Use a function from the `gleam/string` module
    io.println(text.reverse("Hello, Joe!"))
}

  #+end_src

  Qualified imports are the best default in my opinion, but they can be redundant when importing types. Gleam [[https://tour.gleam.run/basics/type-imports/][has that covered]] too:

  #+begin_src Gleam
  import gleam/bytes_tree
  import gleam/string_tree.{type StringTree}

  pub fn main() {
    // Referring to a type in a qualified way
    let _bytes: bytes_tree.BytesTree = bytes_tree.new()

    // Refering to a type in an unqualified way
    let _text: StringTree = string_tree.new()
  }
  #+end_src

- The is no magic: no macros, no meta programming, no traits, no default or rest arguments. This is usually fine for me, with the exception of printing values for debugging, which becomes very tedious since everything needs to be coerced to a string and manually concatenated:
  #+begin_src gleam
io.println(
    "ERROR requesting "
    <> feed.url
    <> "\n"
    <> string.inspect(resp.status)
    <> " "
    <> string.inspect(error),
)
  #+end_src

** error handling

Error handling is always a contentious topic, especially in languages that have errors as values. There's usually some language support to ease the burden of checking results: Elixir has [[https://hexdocs.pm/elixir/1.15.8/Kernel.SpecialForms.html#with/1][with expressions]], Rust has the [[https://doc.rust-lang.org/rust-by-example/std/result/question_mark.html][question mark operator]], Go has, uh, if statements. The Gleam equivalent to those is the [[https://tour.gleam.run/advanced-features/use/][use <- expressions]][fn:6].

Use is perhaps the only "special" bit of syntax of the language, and the one that requires more effort to get used to. One way to think about ~use~ is that it "absorbs" the callback argument of a function much like the pipe "absorbs" the first argument of an operation. For example:

#+begin_src gleam
pub fn handle_request(request: HttpRequest) {
  logger.span("handle_request", fn() {
    database.connection(fn(conn) {
      case request.method {
        Post ->
          case database.insert(conn, request.body) {
            Ok(record) -> created_response(record)
            Error(exc) -> bad_request_response(exc)
          }
        _ -> method_not_allowed_response()
      }
    })
  })
}
#+end_src

Becomes:

#+begin_src gleam
pub fn handle_request(request: HttpRequest) {
  use <- logger.span("handle_request")
  use <- require_method(request, Post)
  use conn <- database.connection()

  case database.insert(conn, request.body) {
    Ok(record) -> created_response(record)
    Error(exc) -> bad_request_response(exc)
  }
}
#+end_src

I admit I haven't my got a-ha! moment with ~use~ yet, and I still struggle with error handling. Part of the problem, I think, is that ~use~ helps with callbacks, which are much less frequent than ~Result~ values, so function calls typically need to be wrapped in [[https://hexdocs.pm/gleam_stdlib/gleam/result.html#try][~result.try~]] and, since different functions tend to return different error types, this occasionally needs to be paired with [[https://hexdocs.pm/gleam_stdlib/gleam/result.html#replace_error][~result.replace_error~]] to make it work:

#+begin_src Gleam
use resp <- result.try(
  httpc.configure()
  |> httpc.follow_redirects(True)
  |> httpc.dispatch(req)
  |> result.replace_error(RequestError),
)
io.println(resp.body)
#+end_src

One of the patterns that emerges of this, I believe, is to define an app-specific error type and use it everywhere, mapping external errors to it.

** erlang interop
The overall impression I got is that, compared to Elixir, Gleam puts more distance to Erlang. This in part a necessity, since they are fundamentally different languages; it requires more work to make them fit together. But I also sense an intention in Gleam's design to "make sense" on its own, to have conceptual integrity independently from the target platform of choice (Gleam transpiles to JavaScript in addition to the BEAM). This shows in that there is no direct mapping for some of the Erlang types, there is no REPL and no attaching to a running release, no discussion of concurrency in the base documentation (not even in that [[https://gleam.run/cheatsheets/gleam-for-erlang-users/][targeted to Erlang users]]). Erlang processes and OTP are better considered as an optional add-on libraries than part of the foundation of the language.

Interop is straightforward, just declaring a function and it's target equivalent, with some type specs:

#+begin_src Gleam
@external(erlang, "persistent_term", "put")
fn put_entries(key: String, value: List(Entry)) -> ok

@external(erlang, "persistent_term", "get")
fn get_entries(key: String) -> List(Entry)
#+end_src

Things got tricky for me when I wanted to use [[https://github.com/willemdj/erlsom][erlsom]], a quirky Erlang library to parse XML documents. For one, I had to use ~atom.create_from_string~ and ~charlist.to_string~ to make it work in Gleam, which was a minor inconvenience. What was more of a problem is that, XML docs being very flexible, parsing an Atom feed yielded a different tuple structure than parsing an RSS feed, and that didn't make sense to Gleam's type checker.

My initial implementation hacked away the problem, by parsing the doc multiple types to "fool" the type checker---once to figure out what type of feed the document was, another to parse it. The proper Gleam way of treating dynamic structures like these would be through the [[https://hexdocs.pm/gleam_stdlib/gleam/dynamic/decode.html#run][~dynamic/decode~]] module, but I found this to be overly complicated. After looking at other libraries, I realized the right solution for this situation is to just write thin Erlang ffi modules to adjust the data for easier translation to the Gleam world. So I put together a very basic feed parser, to get only the few fields I was interested in into an erlang map:

#+begin_src erl
-module(parser).
-export([parse_feed/1]).

parse_feed(Body) ->
    Result = erlsom:simple_form(
               Body,
               [{nameFun, fun(Name, _,_) ->
                                  unicode:characters_to_binary(Name)
                          end }]
              ),
    try Result of
        {ok, {<<"rss">>, _, [{_, _, Elements}|_]}, _} ->
            {<<"rss">>, parse_rss(Elements)};
        {ok, {<<"feed">>, _, Elements}, _} ->
            {<<"atom">>, parse_atom(Elements)};
        Error ->
            {<<"error">>, Error}
    catch _:_ ->
            {<<"error">>, bad_parse}
    end.


parse_atom(Elements) ->
    lists:foldl(fun({<<"entry">>, _, Attrs}, Acc) ->
                        [parse_atom_entry(Attrs, #{}) |Acc];
                   (_, Acc) -> Acc
                end, [], Elements).

parse_rss(Elements) ->
    lists:foldl(fun({<<"item">>, _, Attrs}, Acc) ->
                        [parse_rss_entry(Attrs, #{}) |Acc];
                   (_, Acc) -> Acc
                end, [], Elements).

parse_atom_entry(Attrs, Acc) ->
    % ...

parse_rss_entry(Attrs, Acc) ->
    % ...
#+end_src

** otp

OTP in Gleam is what took me the most effort to figure out. The [[https://hexdocs.pm/gleam_otp/index.html][hexdocs]] cover most of the ground but I found it wasn't enough to get the concepts right, especially when they differed from their Erlang counterparts. For that, I reached to [[https://github.com/bcpeinhardt/learn_otp_with_gleam][this GitHub project]], the tests in there and in the gleam_otp repositories, and Gleam's discord channel history.

The first big difference is that, in Gleam, you typically don't pass around process ids to send messages to; instead a process "declares" what type of messages it expects to receive by creating a [[https://hexdocs.pm/gleam_erlang/gleam/erlang/process.html#Subject][Subject]]:
#+begin_src gleam
let subject = new_subject()

// Send a message with the subject
send(subject, "Hello, Joe!")

// Receive the message
receive(subject, within: 10)
#+end_src

Creating a subject is akin to opening a channel in other languages[fn:7].

So when you create an [[https://hexdocs.pm/gleam_otp/gleam/otp/actor.html][actor]], Gleam's equivalent of a gen_server, what you get is not Pid but a subject. The basic boilerplate for a server, in this case the one managing the entry table, looks like this:

#+begin_src gleam
// type alias for convenience
pub type Table = Subject(Message)

// Declare what types of messages this actor is going to deal with
pub type Message {
  // send a message to itself to rebuild the table
  Rebuild(Table)

  // save a new feed poller to the internal state
  RegisterFeed(String, Poller)
}

// What internal state will the server have
type State {
  State(feeds: dict.Dict(String, Poller))
}

pub fn start() -> Table {
  let state = State(dict.new())
  let assert Ok(table) = actor.start(state, handle_message)
  put_entries(table_key, [])
  process.send(table, Rebuild(table))
  table
}
#+end_src

The loop function just deals with the different Message variants:

#+begin_src Gleam
fn handle_message(message: Message, state: State) {
  let state = case message {
    RegisterFeed(name, poller) -> {
      State(dict.insert(state.feeds, name, poller))
    }
    Rebuild(self) -> {
      let entries = latest_entries(dict.values(state.feeds))
      put_entries(table_key, entries)
      process.send_after(self, rebuild_interval, Rebuild(self))
      state
    }
  }
  actor.continue(state)
}
#+end_src

The module's public API has a function to register a feed in the table and another to get the latest entries:

#+begin_src Gleam
/// Add a poller to the table manager process, so its entries are included when refreshing the table.
pub fn register(table: Table, name: String, poller: Poller) {
  process.send(table, RegisterFeed(name, poller))
}

/// Return the current list of entries, sorted by "inverted frequency".
pub fn get() -> List(FeedEntry) {
  get_entries(table_key) |> list.map(fn(e) { e.entry })
}
#+end_src

The latter doesn't need to receive a table (i.e. a ~Subject(Message)~) because the entries are stored in a globally accessible persistent term.

Unlike the rest of the language, the OTP abstractions haven't stabilized yet. In other words, gleam_otp hasn't reached 1.0. This was most evident with Supervisors. There are two flavors: the older [[https://hexdocs.pm/gleam_otp/gleam/otp/supervisor.html][otp/supervisor]], which apparently is discouraged and has a few bugs, and the newer [[https://hexdocs.pm/gleam_otp/gleam/otp/static_supervisor.html][otp/static_supervisor]] which works better but is less flexible.

I went with a static supervisor [[https://github.com/facundoolano/news.olano.dev/blob/55c4230cc454cdec1c4b81d45453580e4ae8b320/src/table_sup.gleam][for my project]]. The supervision tree looks like this:

#+begin_src
 table_sup
 ├── table_worker
 └── poller_sup
     ├── feed_poller_worker
     ├── feed_poller_worker
     └── ...
#+end_src

I couldn't find a way to either pass the pollers to the table or the table to the pollers while still having every actor spawned by its supervisor. And I couldn't work around it by making the table a named process, since I needed a Subject, not a process to send messages to. So I [[https://github.com/facundoolano/news.olano.dev/blob/55c4230cc454cdec1c4b81d45453580e4ae8b320/src/table.gleam#L45-L47][hacked it]] by storing the Subject on another persistent term every time a new Table actor starts.

** deployment

The documentation always uses ~gleam run~ to run a program, but what if I want to deploy a release it to a server without installing gleam in it? Some digging revealed there's a ~gleam export erlang-shipment~ command that will build the project with Erlang modules in production mode, and with an entrypoint script to run it (provided ~erl~ is in the path):

#+begin_src sh
run() {
  erl \
    -pa "$BASE"/*/ebin \
    -eval "$PACKAGE@@main:run($PACKAGE)" \
    -noshell \
    -extra "$@"
}

shell() {
  erl -pa "$BASE"/*/ebin
}
#+end_src

A neat trick is to change this script to allow for the shell to attach to a running release:

#+begin_src diff
 run() {
   erl \
     -pa "$BASE"/*/ebin \
     -eval "$PACKAGE@@main:run($PACKAGE)" \
     -noshell \
+    -name news@127.0.0.1 \
     -extra "$@"
 }

 shell() {
-   erl -pa "$BASE"/*/ebin
+   erl -pa "$BASE"/*/ebin -name sh@127.0.0.1 -remsh news@127.0.0.1
 }
#+end_src

#+begin_src
$ build/erlang-shipment/entrypoint.sh shell
Erlang/OTP 27 [erts-15.0] [source] [64-bit] [smp:10:10] [ds:10:10:10] [async-threads:1] [jit]

Eshell V15.0 (press Ctrl+G to abort, type help(). for help)
(news@127.0.0.1)1> table:get().
[{entry,<<"Copy first, create later">>,
        <<"https://resextensa.co/p/copy-first-create-later">>,
        {time,1740158441000000,0,none,none}},
 {entry,<<"The CRPG Renaissance, Part 3: TSR is Dead"...>>,
        <<"https://filfre.net/2025/02/the-crpg-renaissance-part-3-tsr-is-dead">>,
        {time,1740157523000000,0,none,none}},
 {entry,...},
 {...}|...]
#+end_src

I briefly documented my deploy setup [[https://github.com/facundoolano/news.olano.dev/blob/55c4230cc454cdec1c4b81d45453580e4ae8b320/README.md#deploy][here]].

** thoughts

I'm not sure if the designer or the community would agree but, to me, Gleam's killer feature is its Erlang/OTP integration. That part of the language doesn't seem stable yet---a custom Gleam wrapper to the Erlang libraries may be a better option for now. And, while I wouldn't use this in production yet, it feels ready enough, and pleasant enough to work with, that I would make it my default for personal projects that are good fit for the BEAM. The type system, the LSP integration, and the error handling bring something distinct to the ecosystem, and I only expect the language to get better on those fronts.

As far as a "Rust without memory management and with better concurrency" goes, I knew going in that Gleam could only be part of the answer. I don't think Gleam can be a general purpose language, just like Erlang can't: the BEAM makes very specific and unusual trade-offs, which don't make it a reasonable choice for applications that require computation efficiency, that don't benefit from high concurrency, or that need to be easy to distribute and operate.

Perhaps the most interesting question, which I certainly won't try to answer here, is: are type safety and /let it crash/ compatible? Can they be complementary? Erlang is [[https://ferd.ca/the-zen-of-erlang.html][all about]] tolerating faults: accepting that you can't possibly catch all errors, and you'd be better off to design your application to recover in the presence of the unexpected. This has the benefit that some error handling code goes away, absorbed by the application structure and its supervision tree. Gleam, like Rust, makes you think preemptively about errors, and spend a much larger amount of time on handling them while writing code. One could argue that by doing this, an entire problem space disappears, the silly type errors that inevitably slip into all dynamically typed programs, leaving OTP to deal with the truly unexpected. There's a tension, but there's also an interesting balance to strike here, and I'm definitely curious to see where the Gleam community settles it.

*** notes
[fn:1] No, not [[https://www.erlang.org/doc/apps/dialyzer/dialyzer.html][dialyzer]].

[fn:2] In the reader, this is paired with an "auto mark as read on scroll" feature so the "infrequent" posts don't stick at the top every time you open the app. This feature doesn't seem to be a good fit for a link aggregator without pagination, but I'm still thinking about it.

[fn:3] Can you spot the bug?

[fn:4] My Emacs setup for Gleam is just [[https://github.com/gleam-lang/gleam-mode][gleam-ts-mode]] and ~(add-hook 'gleam-ts-mode-hook 'lsp-deferred)~.

[fn:5] I finally decided to put learning Gleam in my short to-do list after reading about its namespaces in [[ https://erikarow.land/notes/gleam-favorite-feature][this blog post]].

[fn:6] More about use expressions [[https://gleam.run/news/v0.25-introducing-use-expressions/][here]] and [[https://erikarow.land/notes/using-use-gleam][here]].

[fn:7] gleam_otp also introduces the concept of a [[https://hexdocs.pm/gleam_erlang/gleam/erlang/process.html#Selector][Selector]], to be able to receive messages from different subjects at once. I found this one harder to understand intuitively, but it's less frequently used, I think.

[fn:8] I'd still be happily living in the BEAM, if it wasn't that there doesn't seem to be many companies willing to use it anymore. Or willing to hire Erlang devs from South America, anyway. Their loss.
