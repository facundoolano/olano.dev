---
title: What's the Job of a Software Engineer?
date: 2024-06-13 11:14:12
layout: post
lang: en
tags: [software]
draft: true
image: "assets/img/zappa.webp"
---
#+OPTIONS: toc:nil num:nil
#+LANGUAGE: en

** The Job
In order to do a /good/ job, a software engineers need to know what their job is. Depending on the level of abstraction with which they model the world, their personal needs and preferences, their place in the idealism-cynicism spectrum, all of these could be legitimately said to be the purpose of software engineers:

# TODO consider linkingn some sources
- Writing code.
- Building and maintaining quality software.
- Building and maintaining software that solves a problem or provides a service, with a good user experience.
- Building and maintaining /good enough/ software /cost-effectively/.
- Managing complexity.
- Minimizing accidental complexity and assisting with essential complexity.
- Satisfying customer needs.
- Delighting users.
- Making money for their employing organization or their customers.
- Increasing revenue and/or reducing costs for their employing organization of their customers.
- Making money (for themselves).

There are surely more.
Some of the goals above can be reduced or abstracted to others. For example: we can work (to some extent) under the assumption that quality software will delight users and make money money for our employing organization.
But those abstractions can be taken too far, out of the context where are intended to work. Sometimes you need to sacrifice some quality to stay in budget. Or you need to introduce features that annoy users but benefit the business. <In a [[file:code-is-run-more-than-read][previous post]] I explored some the of problems that come up when <sticking too rigidly> to a narrow perspective of our work>

Some of these goals are derived from models that are ultimately incompatible or contradictory with each other, and will only coexist in perpetual tension.

** Worse is Better
Software engineering is knowledge work and involves some degree of creativity. It's fair to say, without pretense, that a software engineer is closer to a craftsperson than a factory worker. Some of software engineers care about doing a good job, independent of it's compensation. <And their definition of /a good job/, is subjective.>

There's a fundamental tension between building quality software and meeting business needs.
<This tension manifests in many ways / has many expressions>
- quality vs cost / doing things well vs doing them economically.
- tactical vs strategical
- a personal favorite, the right thing vs worse is better.

- <summarize mit vs new jersey and conclusions>
- perhaps a testament of the irreducible tension is that the author later published further pieces against and in favor of the original idea.

- in the first place, the worse is better argument is compelling because it continued to be confirmed by history.
- but most of all, because it tends to resonate with our individual experience.
  - we first learn about programming as a kind of logic, something of an exact science: there must be one optimal solution to a given problem and our job is to find it. But then, as we become professional software developers we learn that there are trade-offs, compromises to be made, factors outside the code that we need to take into consideration. that there may be more than one definition of /correct/ ---some more relevant than others. that we need to be pragmatic, convince others, generate consensus, abide by the decisions of the team or the orders of our boss. the mit vs new jersey tension also echoes industry vs academia, science vs engineering. Accepting that worse could be better is part of becoming professionals.

- of course worse can be worse.
  - when we're driven by the tactical mindset and worse is better becomes a slogan:
    TODO quote
    <we take the easy road without doing any cost-benefit analysis ---when we deem such analysis a waste of time.
- business will judge our work by its observable (preferably measurable) features: how much did it cost to produce, how much money it's bringing in.
- the quality of the design is invisible, at least until it gets so bad that bugs start cropping up and development starts becomes ever slower. <Which usually the point at which it's hardest to go back and fix

** Killing Gollum
- So we can't just ignore business needs and economic realities, but we can't just entirely submit to them.

- there's value in preserving the craftsperson attitude, of protecting the joy and the pride of job well done.
  #  Hay que encontrar una manera de dosificar esa pulsión por lo bueno y lo bello, cultivarla sin dejar que sea la sola fuerza conductora de nuestras decisiones, camuflarla. Darle una fachada de pragmatismo ingenieril a nuestro núcleo idealista.
- Software development is a balancing act. <We need some criteria to stay safe from both extremes.
  - We have to be pragmatic, yes, we may not always get to do /the right thing/, we may be cornered into programming tactically. But worse will still be worse and it's fine to feel a bit bad about having to compromise. Let the tech debt become tech guilt.
 # Entonces solo vamos a permitirnos cortar camino cuando lo justifique un análisis; vamos a simplificar el código aunque ya funcione; vamos a negociar por tiempo para mejorar los sistemas o vamos a pasar las mejoras por contrabando. Sembrar belleza al costado del camino, maximizar el beneficio de la complejidad que eliminemos. Pensar estratégicamente, aunque solo alcancemos a ejecutar una parte de lo que creamos necesario. Hacer lo que se pueda con el tiempo que tengamos.
- decide what to do with the time that has been given to us.

-----
/The ideas in this post were [[file:worse-is-better-is-worse-is-better][previously]] [[file:inocencia-interrumpida][explored]] in Spanish./
