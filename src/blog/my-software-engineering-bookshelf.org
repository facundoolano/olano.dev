---
title: My Software Bookshelf
date: 2024-08-02
layout: post
lang: en
tags: [software, books]
draft: true
---
#+OPTIONS: toc:nil num:nil
#+LANGUAGE: en

Here are books I have read twice \\
and books I expect to read again in time.\\
Here are books I hope I'll read\\
and books I wish I had but never will.

#+BEGIN_EXPORT html
<br/>
<div></div>
#+END_EXPORT

Some of these are not for reading\\
but for holding up and smelling and feeling;\\
some of these are just for skimming:\\
starting out---just staring---and leaving.
#+BEGIN_EXPORT html
<br/>
<div></div>
#+END_EXPORT

Have a list.

-----
1. Code[fn:1]
2. The Innovators[fn:2]
   + The Mythical Man Month[fn:3]
   + Coders at Work
   + The Soul of a New Machine
3. The Algorithm Design Manual
   + Programming Pearls
4. The New Turing Omnibus
5. Concepts, Techniques, and Models of Computer Programming
   + Crafting Interpreters
   + Essentials of Compilation
6. The Missing README
7. On Writing Well
   + Several short sentences about writing
8. The Design of Everyday Things
9. Thinking in Systems
10. The Pragmatic Programmer
11. A Philosophy of Software Design
    + Learning Domain-Driven Design
12. How Linux Works
    + Systems Performance
13. Learn Concurrent Programming with Go
    + Learn You Some Erlang for Great Good!
14. SQL Performance Explained
15. Designing Secure Software
    + Real-World Cryptography
16. Release It!
17. Kill It With Fire
18. The Staff Engineer's Path
    + The Manager's Path
    + Team Topologies
    + Fundamentals of Software Architecture
    + Building Microservices
19. Designing Data-Intensive Applications
    + Database Internals

-----
[fn:1] this is a test.

[fn:2] One of those books that tell the history of a field like a thriller. This does with computing what /Fermat's Last Theorem/ did with mathematics, /The Age of Uncertainty/ with physics, /Replay/ with video games and /It's all a Game/ with board games. Such an historical overview provides a great framework to <organize/lay out> the knowledge of the discipline.

[fn:3] Perhaps the first book to qualify as a Software Engineering classic. Any engineer would probably get something out of /The Mythical Man Month/ and /No Silver Bullet/, but the collection as a whole by now seems more of historical than practical interest.
