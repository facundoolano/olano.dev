---
title: A Note on Worse is Better
date: 2024-06-13 11:14:12
layout: post
lang: en
tags: [software]
draft: true
image: "assets/img/zappa.webp"
---
#+OPTIONS: toc:nil num:nil
#+LANGUAGE: en



#+BEGIN_CENTER
\lowast{} \lowast{} \lowast{}
#+END_CENTER


Software engineering is knowledge work; it involves some amount of creativity. It's fair to say, at the risk of sounding pretentious, that software engineers are closer to craftspoeple than to assembly line workers. That can explain why some engineers develop an interest in the task itself ---the craft---, detached from its economical compensation. They genuinely care about, and take pride in, doing a good job ---by their own, subjective definition of /good/. Some may go as far as to strive for /elegance/ and /beauty/. At best, this can make the work fulfilling; at worse, it makes work an end in itself.

So there's a fundamental tension between the software craft and the business; if we try to maximize both quality and profit, a conflict will eventually emerge.

- strategical vs tactical programming

- the right thing vs worse is better <metaphor> <proverb> (?.
- <summarize mit vs new jersey and conclusions>
- perhaps a testament of the irreducible tension is that the author later published further pieces against and in favor of the original idea.
- in the first place, the worse is better argument is compelling because it continued to be confirmed by history.
- but most of all, because it tends to resonate with our individual experience.
  - we first learn about programming as a kind of logic, something of an exact science: there must be one optimal solution to a given problem and our job is to find it. But then, as we become professional software developers we learn that there are trade-offs, compromises to be made, factors outside the code that we need to take into consideration. that there may be more than one definition of /correct/ ---some more relevant than others. that we need to be pragmatic, convince others, generate consensus, abide by the decisions of the team or the orders of our boss. the mit vs new jersey tension also echoes industry vs academia, science vs engineering, free software vs open source. Accepting that worse could be better is part of becoming professionals.

An interesting feature of the worse is better mindset is that its definition of /good/, while technically-grounded, can be conveniently bent to align with business needs. /The Right Thing/ carried the risk of being impractical, unsuited for the real-world, but there's a higher, subtler risk in using /Worse is Better/ as a slogan, an excuse to slip into a purely tactical mindset. Sometimes worse is just worse.

Business will judge our work by its observable (preferably measurable) features: how much did it cost to produce, how much money it's bringing in. The quality of the design goes unnoticed, at least until it gets so bad that crop up and development becomes slower. At which point there's likely not going back and fixing it.

** Killing Gollum
Software development is a balancing act. We can't just ignore economic restrictions and business needs, but we can't just entirely submit to them, either.
- But that can't be our only driver.
- We need some criteria to stay clear from both ends, a pragmatic facade to our idealist kernel.

<There's value in keeping a craftsperson attitude, in preserving the joy and pride of a job well done. We may not always get to do /The Right Thing/, we may be cornered into programming tactically. It's fine to feel a bit bad about having to compromise. Let the tech debt become tech guilt.

 # Entonces solo vamos a permitirnos cortar camino cuando lo justifique un análisis; vamos a simplificar el código aunque ya funcione; vamos a negociar por tiempo para mejorar los sistemas o vamos a pasar las mejoras por contrabando. Sembrar belleza al costado del camino, maximizar el beneficio de la complejidad que eliminemos. Pensar estratégicamente, aunque solo alcancemos a ejecutar una parte de lo que creamos necesario. Hacer lo que se pueda con el tiempo que tengamos.
- As Gandalf famously said, decide what to do with the time that has been given to us.

-----
/The ideas in this post were [[file:worse-is-better-is-worse-is-better][previously]] [[file:inocencia-interrumpida][explored]] in Spanish./

** Sources
- [[https://web.stanford.edu/~ouster/cgi-bin/aposd.php][A Philosophy of Software Design]].
- [[https://agilemanifesto.org/principles.html][Principles behind the Agile Manifesto]].
- [[https://pragprog.com/titles/tpp20/the-pragmatic-programmer-20th-anniversary-edition/][The Pragmatic Programmer]].
- [[https://chelseatroy.com/2024/03/29/how-do-we-evaluate-people-for-their-technical-leadership/][How do we evaluate people for their technical leadership?]]
- [[https://www.dreamsongs.com/WorseIsBetter.html][The Rise of the Worse is Better]].
- [[http://pchiusano.github.io/2014-10-13/worseisworse.html][The problematic culture of "Worse is Better"]].
- [[https://www.kalzumeus.com/2011/10/28/dont-call-yourself-a-programmer/][Don't Call Yourself A Programmer, And Other Career Advice]].
- [[https://en.wikipedia.org/wiki/We're_Only_in_It_for_the_Money][We're Only in It for the Money]].
