---
title: Software Possession for Personal Use
subtitle: About Local-First and Personal Software
date: 2024-08-12
layout: post
lang: en
tags: [software]
draft: true
---
#+OPTIONS: toc:nil num:nil
#+LANGUAGE: en

There's a lot to be frustrated about contemporary software and the modern web. (If you are a software user and you are not frustrated, you can safely skip this article).

There's a lot to be frustrated about software, the cloud, and Big Tech, especially if you've been using computers long enough to remember what the experience used to be like. It was worst, of course, in some ways, more limited and primitive, but much better in others. And that's the thing: we probably didn't notice that we were making this trade-off---not before we were all-in.

We gave up privacy and control in exchange of convenience and information sharing, but we also gave up performance and offline access, and data durability and ownership. There are things we can do now---things we /need/ to do now, like video conferencing and real-time collaboration---that couldn't be done with traditional desktop software. But for the things we /could/ do back then, it's likely that the overall experience has gotten worse, and it seems to be getting worse all the time.

There's a lot to be frustrated about, many problems with contemporary software and many ways to reason about and address them:

- Building [[https://www.inkandswitch.com/local-first/][Local-First Software]].
- Replacing platforms [[https://knightcolumbia.org/content/protocols-not-platforms-a-technological-approach-to-free-speech][with open protocols]].
- Self-hosting Free and Open-Source software.
- Using P2P networks, like BitTorrent and the InterPlanetary File System.
- Using Federated networks, like those powered by [[https://en.wikipedia.org/wiki/ActivityPub][ActivityPub]].
- Moving from walled gardens to the [[https://www.jvt.me/posts/2019/10/20/indieweb-talk/][IndieWeb]].
- [[https://maggieappleton.com/home-cooked-software][Home-Cooking Software]] as bare-foot developers.

(If you aren't already familiar with these ideas, reading about them is probably a better use of your time than reading the rest of this article).

I want to introduce my own provisional take on alternative development, which I've been calling /Personal Software/, by first commenting on Local-First Software. Not only because that's where I drew most of my ideas from but because I think it's the best articulated and most promising of the efforts I listed above.

#+BEGIN_CENTER
\lowast{} \lowast{} \lowast{}
#+END_CENTER

The [[https://www.inkandswitch.com/local-first/][Local-First paper]] describes the transition from desktop to the cloud, what we lost along the way, and how we could get it back, emphasizing the real-time collaboration aspects of modern software. The biggest challenge, then, lies in re-imagining applications like Google Docs in a context where there isn't a centralized server acting as a mediator between clients. Hence the need to experiment with decentralized data replication and conflict resolution, and the prominent place that [[https://en.wikipedia.org/wiki/Conflict-free_replicated_data_type][CDRTs]] occupy in this space.

Useful and ground-breaking as it is, when I look back at my personal experience, it wasn't real-time collaboration what drew me to replace desktop applications with cloud platforms. What forced me to "surrender" was that I went from using a single computer at home to using another one at the office, and carrying a third one in my pocket at all times[fn:1]. I needed my programs to run on all my devices and my data available and synchronized everywhere. When I look at the home screen on my phone, half of what I see are specialized data synchronization apps for my personal use: Google Drive, Google Keep, Trello, LastPass, Goodreads, Spotify.

I can live with the loss of control and privacy of short-term real-time collaboration sessions. I can live with unnecessary roundtrip latency and mandatory internet connection. But I can't go back to local-only, single-device applications. And I don't want to live in a world where every 6 months I need to add an extra hop to find an album in Spotify, where Google abruptly retires applications I came to rely on, where Microsoft places ads in my task bar, and Amazon acquires companies to let their products, which I use, rot to death.

As a user, I can't become proficient with platforms like I did with traditional desktop applications---and continue to do with open source software. Not only they are not tailored to my needs, but I can't even adjust to the capabilities they offer without the constant fear of them unexpectedly changing, becoming unusable or altogether unavailable. Platforms get in the way of realizing the Creative Computing and Augmented Human Intellect ideals that made me want to become a programmer. We replaced the bicycle for the mind with a bunch of brain crutches.



#+BEGIN_CENTER
\lowast{} \lowast{} \lowast{}
#+END_CENTER

In a recent conference talk by Martin Kleppmann, I perceived a slight shift in the Local-First narrative, placing less emphasis on real-time collaboration and more on interoperable data synchronization. This was best captured by a slide with a "Local-First Endgame" diagram:

#+BEGIN_EXPORT html
<div class="text-center">
 <img src="/assets/img/localfirst.jpg">
</div>
#+END_EXPORT

[TODO explain diagram.] This is a future I look forward to; this talk made me even more enthusiastic about the Local-First ideas. But there's still a lot of way to go before the community agrees on protocols and vendors start providing sync services, and open source libraries become available to assist app developers implementing this architecture. I can think of a few short-term experiments in this direction, like building serverless client applications that synchronize their data with [[https://vlcn.io/docs/cr-sqlite/intro][cr-sqlite]] or writing Open-Source adapter libraries to turn cloud infrastructure from different providers into dumb banks of encrypted data.

But these are interesting research projects rather than viable means to build applications today. For that I prefer to go with a humbler 80-20 solution I started to call /Personal Software/.

** Notes

[fn:1] Then another one in my TV and another in my reading device.
