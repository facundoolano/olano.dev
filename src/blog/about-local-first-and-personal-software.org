---
title: Software Possession for Personal Use
date: 2024-08-12
layout: post
lang: en
tags: [software]
draft: true
image: assets/img/pc.jpg
---
#+OPTIONS: toc:nil num:nil
#+LANGUAGE: en

There's a lot to be frustrated about contemporary software and the modern web. (If you are a software user and you are not frustrated, you can safely skip this article).

There's a lot to be frustrated about software, the cloud, and Big Tech, especially if you've been using computers long enough to remember what the experience used to be like. It was worst, of course, in some ways, more limited and primitive, but much better in others. And that's the thing: we probably didn't notice that we were making this trade-off---not before we were all-in.

We gave up privacy and control in exchange of convenience and information sharing, but we also gave up performance and offline access, and data durability and ownership. There are things we can do now---things we /need/ to do now, like video conferencing and real-time collaboration---that couldn't be done with traditional desktop software. But for the things we /could/ do back then, it's likely that the overall experience has gotten worse, and it seems to be getting worse all the time.

There's a lot to be frustrated about, many problems with contemporary software and many ways to reason about and address them:

- Building [[https://www.inkandswitch.com/local-first/][local-first software]].
- Replacing platforms [[https://knightcolumbia.org/content/protocols-not-platforms-a-technological-approach-to-free-speech][with open protocols]].
- Self-hosting Free and open-source software.
- Using P2P networks, like BitTorrent and the InterPlanetary File System.
- Using Federated networks, like those powered by [[https://en.wikipedia.org/wiki/ActivityPub][ActivityPub]].
- Moving from walled gardens to the [[https://www.jvt.me/posts/2019/10/20/indieweb-talk/][IndieWeb]].
- [[https://maggieappleton.com/home-cooked-software][Home-cooking software]] as bare-foot developers.

(If you aren't already familiar with these ideas, reading about them is probably a better use of your time than reading the rest of this article).

#+BEGIN_CENTER
\lowast{} \lowast{} \lowast{}
#+END_CENTER

The [[https://www.inkandswitch.com/local-first/][local-first software paper]] describes the transition from desktop to the cloud, what we lost along the way, and how we could get it back. It emphasizes real-time collaboration as a distinguishing factor of modern software. The biggest challenge, then, lies in re-imagining applications like Google Docs in a context where there isn't a centralized server acting as a mediator between clients. Hence the need to experiment with decentralized data replication and conflict resolution, and the prominent place that [[https://en.wikipedia.org/wiki/Conflict-free_replicated_data_type][CDRTs]] occupy in this space.

Useful and ground-breaking as it is, when I look back at my personal experience, it wasn't real-time collaboration what drew me to replace desktop applications with cloud platforms. What forced me to "surrender" was that I went from using a single computer at home to using another one at the office, and carrying a third one in my pocket at
all times. Then another one in my TV and another in my reading device. I needed my programs to run on all these devices, and my data available and synchronized everywhere. Even today, When I look at the home screen on my phone, half of what I see are specialized data synchronization apps: Google Drive, Google Keep, Trello, LastPass, Goodreads, Spotify. Even the ones, like Google Docs and Trello, that are intended for team work, I have in my phone just to access the data when I'm away from my laptop. <For me, the real-time collaboration work typically happens in the desktop, in short lived sessions, so I don't mind having to use invasive applications for that.

In a [[https://www.youtube.com/watch?v=NMq0vncHJvU][recent conference talk]] by Martin Kleppmann, I perceived a slight shift in the local-first narrative, focusing less on real-time collaboration and more on interoperable data synchronization. This is best illustrated by a diagram on the "local-first Endgame" slide:

#+BEGIN_EXPORT html
<div class="text-center">
 <img src="/assets/img/localfirst.jpg">
</div>
#+END_EXPORT

[TODO explain diagram.] This is a future I look forward to; this talk made me even more enthusiastic about the local-first ideas. But there's still a lot of way to go before the community agrees on protocols and vendors start providing sync services, and open-source libraries become available to assist app developers implementing this architecture. I can think of a few short-term experiments in this direction, like building serverless client applications that synchronize their data with [[https://vlcn.io/docs/cr-sqlite/intro][cr-sqlite]] or writing open-source adapter libraries to turn cloud infrastructure from different providers into dumb banks of encrypted data.

<But these are interesting research projects rather than viable means to build applications today.
<not as appealing to explore to me, since I'm not a front end dev, so I wouldn't be a natural extension from the kind of apps I typically build
<For that I prefer to go with a humbler solution I've been calling Personal Software.


#+BEGIN_CENTER
\lowast{} \lowast{} \lowast{}
#+END_CENTER

So I got into platforms because of the device syncing, and that's something they do well. Why do I want out? For all the reasons listed in the local-first paper, but, most of all, because platforms dumb-down my computing experience.

I can live with the loss of control and privacy of short-term real-time collaboration sessions. I can live with unnecessary roundtrip latency and mandatory internet connection. But I can't go back to local-only, single-device applications. And I don't want to live in a world where every 6 months I need to add an extra hop to find an album in Spotify, where Google abruptly retires applications I came to rely on, where Microsoft places ads in my task bar, and Amazon acquires companies to let their products, which I use, rot to death.

As a user, I can't become proficient with platforms like I did with traditional desktop applications---and continue to do with local-only open-source software. Not only they can't be tailored to my needs, but I can't  even adjust myself to the capabilities they offer without the risk of them changing unexpectedly, becoming unusable or altogether unavailable. Platforms get in the way of realizing the Creative Computing and Augmented Human Intellect ideals that made me want to become a programmer. We replaced the [[https://www.youtube.com/watch?v=L40B08nWoMk][bicycle for the mind]] with a bunch of brain crutches.

<bridge?
<what's the easiest route find platform alternatives /today/
<one alternative is to self host. some people do it as a hobby
<but I more of a software developer than a systems operator.
I don't particularly enjoy trying new applications and tools
and on the other hand I enjoy the design and implementation process,
even if the programs aren't of much use, or there already are better alternatives. my hobby is /reinterpreting/ the wheel.

<retrospectively
So what is Personal Software? It's software developed by someone for their own personal use (perhaps for the use of a handful of people), fit to their particular needs and preferences, running and providing data access across their devices. In practical terms, this is just a fancy way of saying "dogfooded webapp side projects", but I find there's some value in expressing the idea and reasoning about it in the former terms.


#+BEGIN_CENTER
\lowast{} \lowast{} \lowast{}
#+END_CENTER

The software development process is an endless stream of decisions. Each decision involves trade-offs which (ideally) should be weighed according to the context of the project: its goals, the available resources, the desired capabilities of the software being produced[fn:2]. Given the definition above, this is how I "calibrate" the trade-offs for Personal Software[fn:4]:

- The project scope should be narrow enough to be executed by a single person. More importantly, the cognitive load should be small enough to be carried by one person---the project should fit in one head.
- The system should be operable in local-only or self-hosted setups with minimal effort.
- The application should be accessible from multiple devices.
- Some interface simplicity can be sacrificed in favor of implementation simplicity[fn:3].
- The user experience should satisfy the needs and preferences of the implementer, as opposed to those of some general user (which removes the problem of modeling such user).
- The software doesn't need to solve the problem of its economical sustainability.

Given my current skill set and preferences, to satisfy those requirements I "instantiate" my projects with these defaults:
- The system is structured as a web application, because the [[http://www.catb.org/~esr/writings/taoup/html/ch11s08.html][browser is a universal front end]], allowing the same application to run on desktop and mobile devices.
- The program can also provide a command-line interface for administrative tasks.
- Go as the language, because it's good for implementing servers and CLI programs, and both can be served by a single easy-to-distribute binary. The Go standard library can get you very far without the need of third party dependencies, and its concurrency model makes it easy to implement features like background tasks, that would require additional processes in other environments.
  - In scenarios where it makes sense to sacrifice operational simplicity in favor of implementation simplicity, I can use Python instead.
- SQLite as the database because it's featureful and easy to operate, and personal software rarely needs to scale beyond a single server.
- htmx because it enables rich interfaces without turning the front end into an additional application to design and implement, even without needing to write much JavaScript code.
- Linux on a VPS, because it's cheap and has low operational overhead (as opposed to using containers or AWS infrastructure)[fn:5].


#+BEGIN_CENTER
\lowast{} \lowast{} \lowast{}
#+END_CENTER


<personal software doesnt scale, just like self hosting doesnt scale
<most people, even the ones that have the expertise and the time, don't want to build their own software
<even those inclined to build software for personal use, they can't do it for every piece of software they are going to use
<I still think it's refreshing to know it's an option that's there. knowing that you can drop some of the pretensions when you do decide to tackle a personal project, not to build portfolio, not to learn something in particular, but to recover some of that joy in the act of creating your own tools

** Notes

[fn:5] I'm tempted to throw Tailwind CSS, which I haven't tried yet, into the mix, so I can make it: @@html:<b>G</b>o, <b>H</b>tmx, Linux <b>O</b>n a VPS, <b>S</b>QLite, and <b>T</b>ailwind@@, and call it the "GHOST stack".

[fn:4] You can see how I applied this mindset in the [[reclaiming-the-web-with-a-personal-reader][post about feedi]] and in the [[https://jorge.olano.dev/blog/][jorge devlog]].

[fn:3] This makes it different from most professional software projects where long-term maintainability may be of higher priority than short-term velocity. See /The Rise of Worse is Better/ and /A Philosophy of Software Design/ for discussions of interface vs implementation trade-offs.

[fn:2] Much software development pain arguably comes from neglecting this calibration exercise, as if there were absolute definitions for /good/ ---and /good enough/--- software; eg. assuming that all software should be build for extensibility and scalability.
